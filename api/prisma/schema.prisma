generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  firstName    String  @map("first_name")
  lastName     String  @map("last_name")
  mobile       String
  email        String  @unique
  password     String
  profileImage String? @map("profile_image")
  role         Role    @default(CUSTOMER)
  enabled      Boolean @default(true)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  lastLogin DateTime @default(now()) @map("last_login") @db.Timestamp(0)

  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?

  addresses Address[]
  cart      Cart?
  reviews   Review[]
  payments  Payment[]
  AuditLog  AuditLog[]

  coupons     UserOnCoupon[]
  couponUsage CouponUsage[]

  productsCreated   Product[]  @relation("ProductCreatedBy")
  categoriesCreated Category[] @relation("CategoryCreatedBy")
  couponsCreated    Coupon[]   @relation("CouponCreatedBy")
}

enum Role {
  SUPERADMIN
  ADMIN
  CUSTOMER
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String 
  details   String? 
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  user   User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId Int?  @map("user_id")
}

model Address {
  id      Int    @id @default(autoincrement())
  address String

  user   User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId Int?  @map("user_id")

  shippings Shipping[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  products Product[]

  createdBy   User @relation("CategoryCreatedBy", fields: [createdById], references: [id])
  createdById Int  @map("created_by")
}

model Product {
  id            Int    @id @default(autoincrement())
  title         String @db.VarChar(255)
  description   String @db.Text
  price         Float
  stockQuantity Int    @map("stock_quantity")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  images ProductImage[]

  category   Category? @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  categoryId Int?      @map("category_id")

  orderItems ProductOnOrder[]
  cartItems  ProductOnCart[]
 

  createdBy   User @relation("ProductCreatedBy", fields: [createdById], references: [id])
  createdById Int  @map("created_by")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  product   Product? @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId Int?     @map("product_id")

  @@map("product_image")
}

model Cart {
  id        Int      @id @default(autoincrement())
  cartTotal Float    @map("cart_total")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  user   User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId Int?  @unique @map("user_id")

  products ProductOnCart[]

  orders Order[]
}

model ProductOnCart {
  id    Int   @id @default(autoincrement())
  count Int
  price Float

  product   Product? @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId Int      @map("product_id")

  cart   Cart? @relation(fields: [cartId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cartId Int   @map("cart_id")

  @@map("product_on_cart")
}

model Order {
  id            Int         @id @default(autoincrement())
  orderNumber   String      @unique 
  note          String?
  cartTotal     Float       @map("cart_total")
  orderStatus   OrderStatus @default(NOT_PROCESSED) @map("order_status")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime    @updatedAt @map("updated_at") @db.Timestamp(0)
  currency      String
  shippingFee   Float?      @default(0) @map("shipping_fee")
  orderDiscount Float?      @default(0) @map("order_discount")

  products ProductOnOrder[]

  payment Payment?

  shipping Shipping?

  cart   Cart? @relation(fields: [cartId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cartId Int?  @map("cart_id")

  coupon      Coupon?       @relation(fields: [couponId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  couponId    Int?          @map("coupon_id")
  couponUsage CouponUsage[]
}

enum OrderStatus {
  NOT_PROCESSED //เพิ่งสร้าง ยังไม่ได้ดำเนินการ
  PENDING_PAYMENT //  รอการชำระเงิน
  PAID // จ่ายแล้ว
  CONFIRMED // ร้านค้ารับออเดอร์แล้ว
  PREPARING // กำลังเตรียมสินค้า
  SHIPPED // ส่งของแล้ว
  DELIVERED // ถึงปลายทางแล้ว
  COMPLETED // ลูกค้ากดยืนยันสำเร็จ
  CANCELLED // ยกเลิก
  RETURNED // ส่งคืน
  REFUNDED // คืนเงิน
  FAILED //  ระบบล้มเหลว/สั่งซื้อไม่สำเร็จ
}

model ProductOnOrder {
  id       Int    @id @default(autoincrement())
  count    Int
  price    Float
  discount Float? @default(0)

  order   Order? @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderId Int    @map("order_id")

  product   Product? @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId Int      @map("product_id")

  review Review?

  @@map("product_on_order")
}

model Payment {
  id        Int           @id @default(autoincrement())
  amount    Float
  status    PaymentStatus @default(PENDING)
  method    PaymentMethod @default(PROMPTPAY)
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime      @updatedAt @map("updated_at") @db.Timestamp(0)

  order   Order? @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderId Int?   @unique @map("order_id")

  user         User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId       Int?    @map("user_id")
  slipImageUrl String? @map("slip_image_url")

  PaymentRefund PaymentRefund[]
}

enum PaymentMethod {
  PROMPTPAY
  QR_CODE
  CASH
  CREDIT_CARD
  DEBIT_CARD
}

enum PaymentStatus {
  PENDING // รอดำเนินการ/กำลังรอการชำระเงิน
  PAID // ชำระเงินเรียบร้อยแล้ว
  FAILED // การชำระเงินล้มเหลว/ไม่สำเร็จ
  CANCELLED // ยกเลิกการชำระเงิน/ธุรกรรมถูกยกเลิก
  REFUNDED // คืนเงินเรียบร้อยแล้ว
  EXPIRED // หมดอายุ (เช่น QR code หรือ link การชำระเงินหมดอายุ)
  PARTIALLY_REFUNDED // คืนเงินบางส่วน (คืนเงินแค่ส่วนหนึ่ง ไม่ได้คืนเต็มจำนวน)
}

model PaymentRefund {
  id        Int      @id @default(autoincrement())
  amount    Float
  reason    String?
  createdAt DateTime @default(now())

  payment   Payment @relation(fields: [paymentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  paymentId Int     @map("payment_id")
}

model Coupon {
  id       Int    @id @default(autoincrement())
  code     String @unique
  discount Float

  expiredAt  DateTime @map("expired_at") @db.Timestamp(0)
  usageLimit Int?     @map("usage_limit")
  usageCount Int?     @map("usage_count")

  users       UserOnCoupon[]
  Order       Order[]
  couponUsage CouponUsage[]

  createdBy   User? @relation("CouponCreatedBy", fields: [createdById], references: [id])
  createdById Int?  @map("created_by")
}

model UserOnCoupon {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  coupon     Coupon   @relation(fields: [couponId], references: [id])
  couponId   Int
  assignedAt DateTime @default(now())

  @@id([userId, couponId])
  @@map("user_on_coupon")
}

model CouponUsage {
  id     Int      @id @default(autoincrement())
  usedAt DateTime @default(now()) @map("used_at") @db.Timestamp(0)

  user   User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId Int  @map("user_id")

  coupon   Coupon @relation(fields: [couponId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  couponId Int    @map("coupon_id")

  order   Order? @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderId Int?   @map("order_id")

  @@map("coupon_usage")
}

model Shipping {
  id             Int            @id @default(autoincrement())
  trackingNumber String?        @map("tracking_number")
  method         ShippingMethod @default(PICKUP)
  status         ShippingStatus @default(PENDING)
  shippedAt      DateTime       @default(now()) @map("shipped_at") @db.Timestamp(0)
  deliveredAt    DateTime?      @map("delivered_at") @db.Timestamp(0)

  fee Float? @default(0) @map("fee")

  order   Order? @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderId Int?   @unique @map("order_id")

  address   Address? @relation(fields: [addressId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  addressId Int?     @map("address_id")
}

enum ShippingMethod {
  THAILAND_POST
  EMS
  KERRY_EXPRESS
  FLASH_EXPRESS
  J_AND_T
  SCG_EXPRESS
  NINJA
  PICKUP // มารับด้วยตนเอง
}

enum ShippingStatus {
  PENDING // กำลังรอการจัดส่ง/ยังไม่เริ่มกระบวนการขนส่ง
  PACKED // สินค้าได้รับการบรรจุ/เตรียมพร้อมสำหรับการขนส่ง
  IN_TRANSIT // สินค้ากำลังอยู่ระหว่างการขนส่งไปยังปลายทาง
  DELIVERED // สินค้าถูกส่งถึงลูกค้า/ผู้รับสำเร็จแล้ว
  FAILED // การขนส่งล้มเหลว (เช่น ไม่พบที่อยู่ ปฏิเสธรับสินค้า ฯลฯ)
  RETURNED // สินค้าถูกส่งกลับต้นทางหรือต้องคืนผู้ขาย
  CANCELLED // การจัดส่งถูกยกเลิกก่อนเริ่มกระบวนการขนส่ง
  LOST // สินค้าสูญหายระหว่างการขนส่ง
}

model ShippingRate {
  id          Int            @id @default(autoincrement())
  method      ShippingMethod
  rate        Float
  description String?

  @@map("shipping_rate")
}

model Review {
  id      Int     @id @default(autoincrement())
  rating  Int?
  comment String?

  reviewDate DateTime @default(now()) @map("review_date") @db.Timestamp(0)

 

  user   User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  userId Int?  @map("user_id")

  images ReviewImage[]

  productOnOrder   ProductOnOrder? @relation(fields: [productOnOrderId], references: [id])
  productOnOrderId Int?            @unique
}

model ReviewImage {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  review   Review? @relation(fields: [reviewId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  reviewId Int     @map("review_id")

  @@map("review_image")
}
